{
  // the map to values
  const is = require('is_js');
  const path = require('path');
  const cimico = require('cimico');

  const types = require(path.join(__dirname, 'types.js'));
  const strings = require(path.join(__dirname, '../src/strings'));
  const utils = require(path.join(__dirname, 'utils.js'));
  const State = require(path.join(__dirname, 'state.js'));

  const log = cimico({
    pretty: false,
  });

  log.p.log('Starting...');

  const result = new State('', null, -1);
  result.type = new types.Object();

  let current = result;

  function addKey(key) {
    current.addKey(key);
  }

  function addType(type) {
    current.type = type;
  }

  function addParent(parent) {
    current.parent = parent;
  }

  function addIndent(indent) {
    log.f.log('Adding indent=%b and current indent is=%b', indent, current.indent);
    if (indent > current.indent) {
      const newState = new State('', current, indent);
      current = newState;
    } else if (indent === current.indent) {
      const newState = Object.create(current);
      current = newState;
    } else {
      while(current.indent !== indent) {
        current = current.parent;
      }
      const newState = Object.create(current);
      current = newState;
    }
  }

  function add() {
    const { key, type } = current;
    log.debug(current);
    console.log(current.addKey);
    log.f.log('Adding key %u', key);
    current.read();
  }
}

start
  = keyVal* {
    return result.type.value;
  }


keyVal
  = linebreak indent key:key _ ':' _ type:type _ linebreak {
    log.f.log('key=%b and value=%b', key, type.name);
    addKey(key);
    addType(type);
    add();
    return current;
  }

linebreak
  = space:[\n]* {
    log.log('Found line break');
    return result;
  }

type
  = typeString / typeObject / typeInteger

typeString
  = 'String' {
    return new types.String();
  }

typeObject
  = 'Object' {
    return new types.Object();
  }

typeInteger
  = 'Integer' {
    return new types.Integer();
  }

typeInside
  = typeInteger / typeObject / typeString

typeArray
  = 'Array(' _ itemType:typeInside _ ')' _ '{'  {
    return new types.Array(itemType);
  }

indent
  = indents:[ ]* {
    const il = indents.length;
    log.f.log('Found indentation %b', il);
    addIndent(il);
    return il;
  }

key
  = first:[_a-zA-Z]others:[_a-zA-Z]+ {
    const r = first + others.join('');
    // console.log(r);
    return r;
  }

length
 = digits:[0-9]+ {
   const value = parseInt(digits.join(''), 10);
   log.f.log('Found length %b', value);
   return value;
 }

// optional whitespace
_  = [ \t]*

// mandatory whitespace
__ = [ \t]+